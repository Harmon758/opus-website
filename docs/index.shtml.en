<!--#include virtual="/ssi/header.include" -->
<!--#include virtual="/ssi/contentheader.include" -->

<h1>Documentation</h1>

<h2>Developing with libopus (API reference)</h2>
Libopus is the reference implementation of the Opus codec.
<blockquote>
<table style="border-spacing: 0;">
<tr>
    <td class=emph>libopus 1.1 release</td>
    <td><a href="html_api-1.1.0/index.html">HTML</a>,</td>
    <td><a href="opus_api-1.1.0.pdf">PDF</a></td>
</tr>
<tr>
    <td class=emph>pre-release version</td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opus/ws/doc/html/index.html">HTML</a>,</td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opus/ws/doc/latex/refman.pdf">PDF</a></td>
</tr>
<tr>
    <td class=emph>libopus 1.0.3 release</td>
    <td><a href="html_api-1.0.3/index.html">HTML</a>,</td>
    <td><a href="opus_api-1.0.3.pdf">PDF</a></td>
</tr>
</table>
</blockquote>

<h2>Developing with Opusfile (API reference)</h2>
Opusfile is a easy to use library that encapsulates everything you need beyond
libopus to correctly and completely support the playback of ".opus" (OggOpus) files.
<blockquote>
<table style="border-spacing: 0;">
<tr>
    <td class=emph>libopusfile 0.6 release</td>
    <td><a href="opusfile_api-0.6/index.html">HTML</a>,</td>
    <td><a href="opusfile_api-0.6.pdf">PDF</a></td>
</tr>
<tr>
    <td class=emph>pre-release version</td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opusfile-unix/ws/doc/html/index.html">HTML</a>,</td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opusfile-unix/ws/doc/latex/refman.pdf">PDF</a></td>
</tr>
</table>
</blockquote>

<h2>Opus-tools man-pages</h2>
<blockquote>
<table style="border-spacing: 0;">
<tr>
    <td class=emph>opusenc <span>(.wav to .opus)</span>
</td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opus-tools/ws/man/opusenc.html">HTML</a></td></tr>
<tr>
    <td class=emph>opusdec <span>(.opus to .wav)</span></td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opus-tools/ws/man/opusdec.html">HTML</a></td>
</tr>
<tr>
    <td class=emph>opusinfo <span>(.opus file info)</span></td>
    <td><a href="https://mf4.xiph.org/jenkins/view/opus/job/opus-tools/ws/man/opusinfo.html">HTML</a></td>
</tr>
</table>
</blockquote>

<h2>IETF specifications</h2>
<blockquote>
<table style="border-spacing: 0">
<tr class="underline">
    <td class=emph>Official Opus codec RFC<br/>
      <span class=subtitle>RFC 6716</span></td>
    <td><a href="https://tools.ietf.org/html/rfc6716">HTML</a>, </td>
    <td><a href="https://tools.ietf.org/pdf/rfc6716">PDF</a>, </td>
    <td><a href="https://tools.ietf.org/rfc/rfc6716.txt">TXT</a></td>
</tr>
<tr class="underline">
    <td class=emph>Latest Opus RTP draft<br/>
      <span class=subtitle>draft-ietf-payload-rtp-opus</span></td>
    <td><a href="https://tools.ietf.org/html/draft-ietf-payload-rtp-opus">HTML</a>, </td>
    <td><a href="https://tools.ietf.org/pdf/draft-ietf-payload-rtp-opus.pdf">PDF</a>, </td>
    <td><a href="https://tools.ietf.org/id/draft-ietf-payload-rtp-opus.txt">TXT</a></td>
</tr>
<tr class="underline">
    <td class=emph>Latest OggOpus container draft<br/>
      <span class=subtitle>draft-ietf-codec-oggopus</span></td>
    <td><a href="https://tools.ietf.org/html/draft-ietf-codec-oggopus">HTML</a>, </td>
    <td><a href="https://tools.ietf.org/pdf/draft-ietf-codec-oggopus.pdf">PDF</a>, </td>
    <td><a href="https://tools.ietf.org/id/draft-ietf-codec-oggopus.txt">TXT</a></td>
</tr>
</table>
</blockquote>

<h2>Other specifications</h2>
<blockquote>
<table style="border-spacing: 0">
<tr class="underline">
  <td class=emph>Opus in ISO Base Media Format<br/>
    <span class=subtitle>(mp4 encapsulation)</span></td>
  <td><a href="opus_in_isobmff.html">HTML</a></td>
</tr>
<tr class="underline">
  <td class=emph>Opus in Webm<br/>
    <span class=subtitle>Matroska encapsulation</span></td>
  <td><a href="https://wiki.xiph.org/MatroskaOpus">HTML</a></td>
</tr>
</table>
</blockquote>

<h2>Tutorials</h2>
<blockquote>
<table style="border-spacing: 0;">
<tr>
    <td style="padding-right:0.5em;"><a href="http://www.saunalahti.fi/~cse/Opus/">Encoding Opus from foobar2000</a>
</td>
    <td><img src="ico-win.png" width=16 height=16 alt="Windows"/></td></tr>
</table>
</blockquote>

<h2>Inside Opus</h2>

<p>
Beyond the RFC itself, there are a several documents out there that describe Opus or parts of Opus.
Not everything in them applies to the final version of Opus, but they should still be useful to
those who want to understand how Opus works. For an overview of the codec, see the 
<a href="http://www.opus-codec.org/presentations/">linux.conf.au 2012 Opus presentation</a>.
</p>

<p>The most accessible descriptions of Opus are probaly Monty's
<a href="http://people.xiph.org/~xiphmont/demo/">demos</a>. 
We have also written some papers describing the algorithm in details:
</p>

<ul>
<li>J.-M. Valin, G. Maxwell, T. B. Terriberry, K. Vos, <a href="http://jmvalin.ca/papers/aes135_opus_celt.pdf">High-Quality, Low-Delay Music Coding in the Opus Codec</a>, <i>Accepted for the 135th AES Convention</i>, 2013.</li>
<li>K. Vos, K. V. Sorensen, S. S. Jensen, J.-M. Valin, <a href="http://jmvalin.ca/papers/aes135_opus_silk.pdf">Voice Coding with Opus</a>, <i>Accepted for the 135th AES Convention</i>, 2013.</li>
<li>K. Vos, <a href="vos_fastburg.pdf">A Fast Implementation of Burg's Method</a>, 2013.</li>
</ul>

<h3>Older contents</h3>

<p>
For historical reasons, some of the information on the algorithmic details is specific to either SILK or CELT.
</p>


<p>For more information on SILK, see the <a href="https://www.ietf.org/proceedings/79/slides/codec-4.pdf">slides</a>
by Koen Vos from the 79th IETF meeting.</p>

<p>You can see
Tim Terriberry's <a href="http://celt-codec.org/presentations/">linux.conf.au 2009 CELT
presentation</a>. Those with a signal processing background can also read two papers that
were published on CELT:
<p>

<ul>
 <li>J.-M. Valin, T. B. Terriberry, C. Montgomery, G. Maxwell, <a href="http://jmvalin.ca/papers/celt_tasl.pdf">A High-Quality Speech and Audio Codec With Less Than 10 ms delay</a>, <i>IEEE Transactions on Audio, Speech and Language Processing</i>, Vol. 18, No. 1, pp. 58-67, 2010. </li>
<li>J.-M. Valin, T. B. Terriberry, G. Maxwell, <a href="http://jmvalin.ca/papers/celt_eusipco2009.pdf">A Full-Bandwidth Audio Codec with Low Complexity and Very Low Delay</a>, <i>Proc. EUSIPCO</i>, 2009.</li>
</ul>

<p>Paper 1 describes CELT version 0.3.2, while paper 2 applies to 0.5.2. The main things that
changed since these papers were written are the pitch prediction/filtering and the
birdie avoidance method.</p> 

<h2 id="testvectors">Test Vectors</h2>
<p>
  Test files to verify that the Opus decoders are operating properly.
</p>
<blockquote>
<p><a href="/testvectors/opus_testvectors.tar.gz">Bitstream conformance set</a> for the codec.<br/>
    This set of bitstreams is used to measure codec implementations for conformance with the specification.
<br>Also available from
 <a href="http://downloads.xiph.org/releases/opus/opus_testvectors.tar.gz">Xiph.Org</a> and 
 <a href="https://ftp.mozilla.org/pub/mozilla.org/opus/opus_testvectors.tar.gz">Mozilla</a>.</p>
</blockquote>
<blockquote><a href="http://people.xiph.org/~greg/opus_testvectors/">The .opus test set</a> is an in-development larger test suite for .opus files.<br/>
  These are suitable for testing opusdec and other media-player software.<br/>
  Files prefixed with 'broken' and 'failure' are intentionally malformed and at least the latter should be rejected.
</blockquote>
<p>
  Note that these files are designed to exercise all aspects of an
  implementation, the fact that they sound terrible is an intended consequence.
</p>

<!--#include virtual="/ssi/footer.include" -->
