<!--#include virtual="/ssi/header.include" -->
<!--#include virtual="/ssi/contentheader.include" -->

    <link rel="stylesheet" href="jgauge.css" type="text/css" />
    <script type="text/javascript" src="../jquery.js"></script>
    <script type="text/javascript" src="../audiodemo.js"></script>
    <script language="javascript" type="text/javascript" src="js/jQueryRotate.min.js"></script>
    <script language="javascript" type="text/javascript" src="js/jgauge-0.3.0.a3.js"></script> 
<h1>Opus Examples</h1>

<h2>Audio samples</h2>

<p>These samples demonstrate the quality achievable with Opus. They are have been encoded with 
Opus and then decoded back to wav so that any browser can play them.</p>


<div class="caption">
      <div class="demowrapper" style="position: relative; z-index:10">
      <b>Opus speech samples, various bitrates </b>
      <p></p><div class="audiowrapper"><audio src="samples/speech_orig.wav" tabindex="0" controls="true"></audio></div><p></p>

      <p><b>Playback: [</b>
      <a style="background: none repeat scroll 0% 0% rgb(255, 224, 128);" value="samples/speech_orig.wav">uncompressed</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/speech_8kbps_nb.wav">8 kb/s (nb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/speech_12kbps_mb.wav">12 kb/s (mb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/speech_16kbps_wb.wav">16 kb/s (wb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/speech_24kbps_swb.wav">24 kb/s (swb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/speech_32kbps_fb.wav">32 kb/s (fb)</a> <b>]</b>
      </p><p><b>Download: [</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/speech_orig.wav">uncompressed</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/speech_8kbps_nb.wav">8 kb/s (nb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/speech_12kbps_mb.wav">12 kb/s (mb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/speech_16kbps_wb.wav">16 kb/s (wb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/speech_24kbps_swb.wav">24 kb/s (swb)</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/speech_32kbps_fb.wav">32 kb/s (fb)</a> <b>]</b>
      </p></div>
      <hr>
      <div class="demowrapper" style="position: relative; z-index:10">
      <b>Opus stereo music samples, various bitrates </b>
      <p></p><div class="audiowrapper"><audio src="samples/music_orig.wav" tabindex="0" controls="true"></audio></div><p></p>

      <p><b>Playback: [</b>
      <a style="background: none repeat scroll 0% 0% rgb(255, 224, 128);" value="samples/music_orig.wav">uncompressed</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/music_48kbps.wav">48 kb/s</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/music_64kbps.wav">64 kb/s</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/music_96kbps.wav">96 kb/s</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/music_128kbps.wav">128 kb/s</a> <b>]</b>
      </p><p><b>Download: [</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/music_orig.wav">uncompressed</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/music_48kbps.wav">48 kb/s</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/music_64kbps.wav">64 kb/s</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/music_96kbps.wav">96 kb/s</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/music_128kbps.wav">128 kb/s</a> <b>]</b>
      </p></div>
      <hr>
      <div class="demowrapper" style="position: relative; z-index:10">
      <b>Packet loss robustness at 24 kb/s wideband, 30% loss</b>
      <p></p><div class="audiowrapper"><audio src="samples/music_orig.wav" tabindex="0" controls="true"></audio></div><p></p>

      <p><b>Playback: [</b>
      <a style="background: none repeat scroll 0% 0% rgb(255, 224, 128);" value="samples/plc_orig.wav">no loss</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/plc30_opus.wav">Opus 30% loss</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/plc30_opus_fec.wav">Opus 30% loss with FEC</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" value="samples/plc30_amrwb.wav">AMR-WB 30 % loss</a> <b>]</b>
      </p><p><b>Download: [</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/plc_orig.wav">no loss</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/plc30_opus.wav">Opus 30% loss</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/plc30_opus_fec.wav">Opus 30% loss with FEC</a> <b>|</b>
      <a style="background: none repeat scroll 0% 0% transparent;" href="samples/plc30_amrwb.wav">AMR-WB 30 % loss</a> <b>]</b>
      </p></div>

</div>

<h2>Bitrate scalability</h2>

<p>
The following example demonstrates what happens when gradually varying the
bitrate from 8 kb/s to 64 kb/s. It's an extreme example, but it shows how Opus
can change bandwidth and bitrate seamlessly without any glitch. In practical
applications, bitrate changes are expected to occur much more slowly.
</p>


<table border="0">
<tr>
<td>
	
	<div id="gauge" class="jgauge"></div><br style="clear:both"/>
	<center>Bitrate</center>
</td>
<td style="width:120px">
	<center>
		<span id="mono" style="display:none;font-family:serif;font-size:16pt;"><img src="img/mono.png" style="height:20px;vertical-align:middle;margin:5px;margin-right:20px;"/>Mono</span>
		<span id="stereo" style="display:none;font-size:16pt;"><img src="img/stereo.png" style="height:20px;vertical-align:middle;margin:5px"/>Stereo</span>
	</center>
</td>
<td>

	<div id="gauge2" class="jgauge"></div><br style="clear:both"/> 
	<center>Audio bandwidth</center>
</td>
<tr>
<td colspan="3">
	<br/>
	<center><audio id="sweepaudio" src="sweep.ogg" controls style="width:400px"></audio></center>
</td>
</tr>
</table>


<script type="text/javascript">

	var bitrateStart = 8;
	var bitrateEnd = 64;


	var bitrateGauge = new jGauge();
	bitrateGauge.id = 'gauge';

	var bandwidthGauge = new jGauge();
	bandwidthGauge.id = 'gauge2';
 
	// ugly, stupid way to update things. Welcome to 1997!
	updateGauge = function() {
		var audio = document.getElementById("sweepaudio");

		if(audio.duration) {
			var time = audio.currentTime;
			var progress = time / audio.duration;
			var bitrate = (bitrateEnd - bitrateStart) * progress + bitrateStart;
			bitrateGauge.setValue(bitrate);

			var stereo = document.getElementById("stereo");
			var mono = document.getElementById("mono");

			if(time < 8.3) {
				stereo.style.display = "none";
				mono.style.display = "";
			} else {
				stereo.style.display = "";
				mono.style.display = "none";

			}

			var bandwidth = 4;
			if(time > 1.4) {
				bandwidth = 6;
			}
			if(time > 3.8) {
				bandwidth = 8;
			}
			if(time > 6.2) {
				bandwidth = 12;
			}
			if(time > 10.6) {
				bandwidth = 20;
			}
			bandwidthGauge.setValue(bandwidth);

		}

		window.setTimeout(updateGauge, 100);
	};


	// This function is called by jQuery once the page has finished loading.
	$(document).ready(function(){
		bitrateGauge.init(); // Put the jGauge on the page by initialising it.

		bitrateGauge.label.suffix = "kbps";
		bitrateGauge.label.precision = 0;

		bitrateGauge.ticks.count = 8;
		bitrateGauge.ticks.start = 8;
		bitrateGauge.ticks.end = bitrateEnd;

		bitrateGauge.range.radius = 0;

		bitrateGauge.updateRange();
		bitrateGauge.updateTicks();

		bandwidthGauge.init(); // Put the jGauge on the page by initialising it.

		bandwidthGauge.label.suffix = "kHz";
		bandwidthGauge.label.precision = 0;

		bandwidthGauge.ticks.count = 5;
		bandwidthGauge.ticks.start = 4;
		bandwidthGauge.ticks.end = 20;

		bandwidthGauge.range.radius = 0;

		bandwidthGauge.updateRange();
		bandwidthGauge.updateTicks();	

		window.setTimeout(updateGauge, 10);
	});
</script> 


<h2>Example of use in a web page</h2>
<p>Opus works with the &lt;audio&gt; element just like vorbis.</p>
<p>For example, this code in a web page:</p>
<pre> &lt;audio src="ehren-paper_lights-96.opus" controls&gt;</pre>
<p>displays an embedded player that can play an Opus file.</p>
<div class="player" style="margin-left: 4em">

<audio tabindex="0" src="http://people.xiph.org/~giles/2012/opus/ehren-paper_lights-96.opus" controls="">
         <!-- fallback content for browsers which don't support the audio element -->
         Looks like your browser doesn't support HTML &lt;audio&gt;.
      </audio>
<br>
<em>Paper Lights</em> by <a href="http://magnatune.com/artists/ehren">Ehren Starks</a>, encoded at 96 kb/s <a href="http://creativecommons.org/licenses/by-nc-sa/1.0/" rel="license"> <img src="http://i.creativecommons.org/l/by-nc-sa/1.0/80x15.png" alt="Creative Commons License"> </a>
</div>
<p>
For now, this only works with Firefox 15 or later.</p>


<h2>Live HTTP streams</h2>

These streams can be played in using <a href="http://www.mozilla.org/en-US/firefox/new/">Firefox</a> (version 15 or higher), foobar2000, Gstreamer/Totem (in Linux), or using opusdec from the command-line.<br/><br/>

<br/>
<center>
<table style="margin:20px;width:75%;">
<tbody>
<tr>
<td style="text-align:center;"><a href="http://repeater.xiph.org:8000/temporalfugue.opus">Hypnotic&nbsp;torture&nbsp;clock</a>
<br/>Mono 12kbit/sec</td>
<td style="text-align:right;"><audio controls width=200 src="http://repeater.xiph.org:8000/temporalfugue.opus"></audio></td>
</tr>
<tr><td colspan=2 style="text-align:justified; border-bottom: thin solid;">A rhythmic electronic chant of the current time. Prolonged exposure to this Temporal Fugue is not recommended.
The stream is synthesized in real-time using <a href="http://boodler.org/">boodler</a> and encoded using opusenc and streamed using oggfwd and icecast.</td>
</tr>

<tr style="padding: 10px;">
<td style="text-align:center;"><a href="http://repeater.xiph.org:8000/clock.opus">Endless drone</a>
<br/>Stereo 64kbit/sec</td>
<td style="text-align:right;"><audio controls width=200 src="http://repeater.xiph.org:8000/clock.opus"></audio></td>
</tr>
<tr><td colspan=2 style="text-align:justified; border-bottom: thin solid;">A simulation of an <a href="http://en.wikipedia.org/wiki/FM3">FM3 Buddha Machine</a>,
this stream produces an endless stream of peaceful droning. The stream is synthesized in real-time using <a href="http://boodler.org/">boodler</a> and encoded using opusenc and streamed using oggfwd and icecast.</td>
</tr>
</tbody>
</table>
</center>

<h2>Interactive Demos</h2>
<a href="http://europa.kradradio.com:8200/"><img align="right" width=388 height=461 alt="krad console thumbnail" src="krad-compressed2.png"/></a>
<a href="http://kradradio.com/">KRAD Radio</a> is an open source audio/video mixing and streaming platform currently in active development.
<ul>
  <li><a href="http://europa.kradradio.com:8200/">Demo station — Opuscentauri</a></li>
  <li><a href="http://europa.kradradio.com:8000/">Demo station — Opusprime</a></li>
</ul>
Requires browser Opus and WebSockets support (e.g. Firefox)<br/>
(The latency is high due to buffering in the browser's audio tag and doesn't represent Opus' low latency.)
<br style="clear:both;"/>




<!--#include virtual="/ssi/footer.include" -->
